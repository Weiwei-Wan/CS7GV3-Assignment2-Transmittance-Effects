#version 330

in vec3 normalIn;
in vec3 fragPosIn;

uniform vec3 cameraPos;
uniform samplerCube skybox;
uniform float EtaR;
uniform float EtaG;
uniform float EtaB;
uniform float FresnelPower;

vec3 I = normalize(fragPosIn - cameraPos);
vec3 R = reflect(I, normalize(normalIn));
vec3 T_R = refract(I, normalize(normalIn), EtaR);
vec3 T_G = refract(I, normalize(normalIn), EtaG);
vec3 T_B = refract(I, normalize(normalIn), EtaB);

float F = ((1.0-EtaG) * (1.0-EtaG)) / ((1.0+EtaG) * (1.0+EtaG));
float Ratio = F + (1.0 - F) * pow((1.0 - dot(-I, normalize(normalIn))), FresnelPower);

vec3 reflectColor = vec3(texture(skybox, R));
vec3 refractColor = vec3(0.0);

void main(){
    refractColor.r = vec3(texture(skybox, T_R)).r;
    refractColor.g = vec3(texture(skybox, T_G)).g;
    refractColor.b = vec3(texture(skybox, T_B)).b;
    vec3 color = mix(refractColor, reflectColor, Ratio);
    gl_FragColor = vec4(color, 1.0);
}


